syntax = "proto3";
option java_multiple_files = true;
option java_package = "edu.sjsu.cs249.chain";

package chain;

service HeadChainReplica {
  rpc increment(IncRequest) returns (HeadResponse);
}


message IncRequest {
  string key = 1;
  // if the key does not exist, it will be created with this value, otherwise the value
  // if the existing key will be incremented by this value
  int32 incValue = 2;
}

message HeadResponse {
  // rc = 0 means success, rc = 1 i'm not the head
  uint32 rc = 1;
}

service TailChainReplica {
  rpc get(GetRequest) returns (GetResponse);
}

message GetRequest {
  string key = 1;
}

message GetResponse {
  // rc = 0 means success, rc = 1 i'm not the tail
  uint32 rc = 1;
  int32 value = 2;
}

service Replica {
  rpc update(UpdateRequest) returns (UpdateResponse);
  // will be called by a new successor to this replica
  rpc newSuccessor(NewSuccessorRequest) returns (NewSuccessorResponse);
  rpc ack(AckRequest) returns (AckResponse);
}

message UpdateRequest {
  string key = 1;
  int32 newValue = 2;
  uint32 xid = 3;
}
message UpdateResponse {
}
message NewSuccessorRequest {
  // last zxid seen by successor. used by this replica to determine if
  // it needs to refresh its view from zookeeper. this is the pZxid of the
  // znode in which the replicas register their znodes
  int64 lastZxidSeen = 1;
  // the last xid this replica has seen. it will be -1 if success has not seen any updates.
  uint32 lastXid = 2;
  // the last xid this replica has acked. (for the tail lastXid == lastAck)
  uint32 lastAck = 3;
  // the name of the znode representing the successor link in the change
  string znodeName = 4;
}
message NewSuccessorResponse {
  uint32 rc = 1; // 0 - sending state and missing sent messages
  // 1 - just sending missing sent messages
  // -1 - you are not my successor
  // the latest keys and values, some of the update requests may not be acknowledged
  map<string, uint32> state = 2;
  // UpdateRequests that the successor is missing
  repeated UpdateRequest sent = 3;
  // the last Xid seen by the predecessor (and reflected in the state)
  uint32 lastXid = 4;
}
message AckRequest {
  uint32 xid = 1;
}
message AckResponse {
}